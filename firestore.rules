rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Funzione helper: verifica che l'utente sia autenticato e NON anonimo
    function isAuthenticatedUser() {
      return request.auth != null && 
             request.auth.uid != null &&
             !('token' in request.auth && 'firebase' in request.auth.token && 
               'sign_in_provider' in request.auth.token.firebase && 
               request.auth.token.firebase.sign_in_provider == 'anonymous');
    }

    // Regole per squadre - solo utenti Google autenticati
    match /teams/{teamId} {
      allow read, write: if isAuthenticatedUser() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticatedUser() && request.auth.uid == request.resource.data.userId;
    }
    
    // Regole per ricezioni - solo utenti Google autenticati
    match /receptions/{receptionId} {
      allow read, write: if isAuthenticatedUser() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticatedUser() && request.auth.uid == request.resource.data.userId;
    }
    
    // Regole per formazioni - solo utenti Google autenticati
    match /formations/{formationId} {
      allow read, write: if isAuthenticatedUser() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticatedUser() && request.auth.uid == request.resource.data.userId;
    }
    
    // Regole per squadre pubbliche (lettura ancora pubblica, scrittura solo autenticati)
    match /public_teams/{teamId} {
      allow read: if true; // Lettura pubblica mantenuta
      allow write: if isAuthenticatedUser() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticatedUser() && request.auth.uid == request.resource.data.userId;
    }
    
    // Blocca tutto il resto
    match /{document=**} {
      allow read, write: if false;
    }
  }
}